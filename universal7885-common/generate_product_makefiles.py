import os
from os.path import isfile as exists
from os.path import dirname, basename

debug = True
DEVICE_BASE = 'device/samsung'
HD_DEVICES=['a10dd', 'a10', 'a20', 'a20e']
EX_RUNTIME_STR = 'Vendor config makefile was not found'

def log(x):
  if (debug):
     print(x)

def writeln(f, txt):
    print(txt, file=f)

def check_exist_mk(path, mk):
    ret = exists(path)
    if ret:
        writeln(mk, f'$(call inherit-product, {path})')
    return ret

def write_one_dev_makefile(device, vendor):
    device_path = f'{DEVICE_BASE}/{device}'
    log(f'Write entry => {device_path}')
    with open(f'{device_path}/AndroidProducts.mk', 'w') as ap:
        writeln(ap, f'# Auto-Generated by {__file__}')
        writeln(ap, f'PRODUCT_MAKEFILES += $(LOCAL_DIR)/{vendor}_{device}.mk')
    with open(f'{device_path}/{vendor}_{device}.mk', 'w') as mk:
        writeln(mk, f'# Auto-Generated by {__file__}')
        writeln(mk, f'$(call inherit-product, {device_path}/full_{device}.mk)')
        existed = False
        existed |= check_exist_mk(f'vendor/{vendor}/config/common_full_phone.mk', mk)
        existed |= check_exist_mk(f'vendor/{vendor}/config/common.mk', mk)
        existed |= check_exist_mk(f'vendor/{vendor}/config/rising.mk', mk)
        if not existed:
            raise RuntimeError(EX_RUNTIME_STR)
        writeln(mk, '')
        writeln(mk, f'PRODUCT_NAME := {vendor}_{device}')
        writeln(mk, '')
        if device in HD_DEVICES:
            writeln(mk, 'TARGET_BOOT_ANIMATION_RES := 720')
        else:
            writeln(mk, 'TARGET_BOOT_ANIMATION_RES := 1080')
        writeln(mk, 'TARGET_USES_MINI_GAPPS := true')
        log(f'Write entry <= {device_path}')

def check_makefile(mk, vendor):
    devices = os.listdir(DEVICE_BASE)

    log(f'Check MK => {mk}')
    if exists(mk):
        log(f'Check MK <= {mk} exist')
        for i in devices:
            if not i[:1] == 'a':
                log(f'Skip entry: {i}')
                continue
            write_one_dev_makefile(i, vendor)
        return True
    return False

def main():
    vendors = os.listdir('vendor')
    ok = False

    if 'rising' in vendors:
        mk = 'vendor/rising/config/rising.mk'
        ok |= check_makefile(mk, 'rising')
    else:
        for vendor in vendors:
            mk = f'vendor/{vendor}/config/common.mk'
            ok |= check_makefile(mk, vendor)
    if not ok:
       raise RuntimeError(EX_RUNTIME_STR)

if __name__ == '__main__':
   main()
